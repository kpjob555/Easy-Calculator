{"version":3,"sources":["components/display/display.js","components/inputs/input/input.js","components/inputs/inputs.js","App.js","serviceWorker.js","index.js"],"names":["display","props","className","children","input","onClick","addValue","inputs","mul","div","reset","minus","value","plus","ans","App","state","displayAction","prevInput","operatorSign","prevOperatorSign","showValue","event","setState","concat","checkOperator","operator","length","answer","Number","checkPrev","sign","multiplyNum","currentInput","devideNum","plusNum","minusNum","console","log","this","id","Date","style","textAlign","color","cursor","alert","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e1ed4a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './display.css';\r\n\r\nconst display = (props) => {\r\n    return(\r\n        <div className=\"Display\">\r\n           {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default display;","import React from 'react';\r\nimport './input.css';\r\n\r\nconst input = (props) => (\r\n    \r\n        <div className=\"input\" onClick={props.addValue}>{props.children}</div>\r\n       \r\n    \r\n);\r\n\r\nexport default input;","import React from 'react';\r\nimport ButtonInput from './input/input';\r\nimport './inputs.css';\r\n\r\nconst inputs = (props) => (\r\n    <div className=\"Button\">\r\n        <ul className=\"Teburu\">\r\n           <li><ButtonInput addValue={props.mul}>x</ButtonInput></li>\r\n           <li><ButtonInput addValue={props.div}>/</ButtonInput></li>\r\n           <li><ButtonInput addValue={props.reset}>C</ButtonInput></li>\r\n           <li><ButtonInput addValue={props.minus}>-</ButtonInput></li>\r\n        </ul>\r\n\r\n        <ul className=\"Teburu\">\r\n           <li><ButtonInput addValue={() => props.value(7)}>7</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(8)}>8</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(9)}>9</ButtonInput></li>\r\n           <li><ButtonInput addValue={props.plus}>+</ButtonInput></li>\r\n        </ul>\r\n\r\n\r\n        <ul className=\"Teburu\">\r\n           <li><ButtonInput addValue={() => props.value(4)}>4</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(5)}>5</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(6)}>6</ButtonInput></li>\r\n           <li><ButtonInput addValue={props.ans}>=</ButtonInput></li>\r\n\r\n        </ul>\r\n        \r\n        <ul className=\"Teburu\">\r\n           <li><ButtonInput addValue={() => props.value(1)}>1</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(2)}>2</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(3)}>3</ButtonInput></li>\r\n           <li><ButtonInput addValue={() => props.value(0)}>0</ButtonInput></li>\r\n        </ul> \r\n       \r\n\r\n         \r\n    </div>\r\n);\r\n\r\nexport default inputs;","import React, { Component } from 'react';\nimport Display from './components/display/display';\nimport Keys from './components/inputs/inputs';\nimport './App.css';\n\nclass App extends Component {\n\n  state ={\n    displayAction: '',\n    prevInput: 0,\n    operatorSign: '',\n    prevOperatorSign:  ''\n  }\n\n  showValue = (event) => {\n   // console.log(event);\n    this.setState({displayAction: this.state.displayAction.concat(event)});\n    \n  }\n\n\n\n  checkOperator = (operator) => {\n    //check in the past\n    if(this.state.prevOperatorSign && this.state.prevOperatorSign.length > 0){\n      if(this.state.prevOperatorSign === 'div') {\n        const answer = Number(this.state.prevInput ,10) / Number(this.state.displayAction);\n      //  console.log(Number(this.state.prevInput ,10)+ '/' + Number(this.state.displayAction) + ' Answer = '+answer);\n        this.setState({\n          operatorSign: operator,\n          prevInput: answer\n        });\n      }\n\n      if(this.state.prevOperatorSign === 'mul') {\n        const answer = Number(this.state.prevInput ,10) * Number(this.state.displayAction);\n      //  console.log(Number(this.state.prevInput ,10)+ '*' + Number(this.state.displayAction) + ' Answer = '+answer);\n        this.setState({\n          operatorSign: operator,\n          prevInput: answer\n        });\n      }\n\n      if(this.state.prevOperatorSign === 'plus') {\n        const answer = Number(this.state.prevInput ,10) + Number(this.state.displayAction);\n       // console.log(Number(this.state.prevInput ,10)+ '+' + Number(this.state.displayAction) + ' Answer = '+answer);\n        this.setState({\n          operatorSign: operator,\n          prevInput: answer\n        });\n      }\n\n      if(this.state.prevOperatorSign === 'minus') {\n        const answer = Number(this.state.prevInput ,10) - Number(this.state.displayAction);\n       // console.log(Number(this.state.prevInput ,10)+ '-' + Number(this.state.displayAction) + ' Answer = '+answer);\n        this.setState({\n          operatorSign: operator,\n          prevInput: answer\n        });\n      }\n\n    } else {\n      //console.log('Can not find operator' );\n      //not find pass op, take present op to prev op\n      this.setState({\n        prevOperatorSign: operator,\n      });\n    }\n\n  }\n\n  checkPrev = (sign) => {\n    if(this.state.prevInput && this.state.prevInput.length > 0) {\n      //console.log('It has number!');\n      return this.state.prevInput;\n    }\n    else {\n      //console.log('No previous number');\n      this.setState({\n          prevInput: this.state.displayAction,\n          //operatorSign: sign\n      });\n    }\n  }\n\n\n\n  multiplyNum = () => {\n    this.checkPrev('mul');\n    this.checkOperator('mul', this.state.currentInput);\n    this.setState({displayAction: ''});\n  }\n\n  devideNum = () => {\n  \n    this.checkPrev('div');\n    this.checkOperator('div', this.state.currentInput);\n    this.setState({displayAction: ''});\n  }\n\n  plusNum = () => {\n    this.checkPrev('plus');\n    this.checkOperator('plus', this.state.currentInput);\n    this.setState({displayAction: ''});\n  }\n\n  minusNum = () => {\n    this.checkPrev('minus');\n    this.checkOperator('minus', this.state.currentInput);\n    this.setState({displayAction: ''});\n  }\n\n  answer = () => {\n    this.checkPrev();\n    //this.setState({operatorSign: [this.state.prevOperatorSign]});\n    if(this.state.operatorSign === 'div'||this.state.prevOperatorSign === 'div') {\n      const answer = Number(this.state.prevInput ,10) / Number(this.state.displayAction);\n     //console.log('Final Answer = '+answer);\n      this.setState({\n        operatorSign: '',\n        prevInput: answer,\n        displayAction: answer,\n        prevOperatorSign: ''\n      });\n    }\n    if(this.state.operatorSign === 'mul'||this.state.prevOperatorSign === 'mul') {\n      const answer = Number(this.state.prevInput ,10) * Number(this.state.displayAction);\n      console.log('Final Answer = '+answer);\n      this.setState({\n        operatorSign: '',\n        prevInput: answer,\n        displayAction: answer,\n        prevOperatorSign: ''\n      });\n    }\n    if(this.state.operatorSign === 'plus'||this.state.prevOperatorSign === 'plus') {\n      const answer = Number(this.state.prevInput ,10) + Number(this.state.displayAction);\n      //console.log('Final Answer = '+answer);\n      this.setState({\n        operatorSign: '',\n        prevInput: answer,\n        displayAction: answer,\n        prevOperatorSign: ''\n      });\n    }\n    if(this.state.operatorSign === 'minus'||this.state.prevOperatorSign === 'minus') {\n      const answer = Number(this.state.prevInput ,10) - Number(this.state.displayAction);\n      //console.log('Final Answer = '+answer);\n      this.setState({\n        operatorSign: '',\n        prevInput: answer,\n        displayAction: answer,\n        prevOperatorSign: ''\n      });\n    }\n  }\n\n\n  render() {\n\n    return(\n      <div className=\"App\">\n        <Display>\n          <p>{this.state.prevOperatorSign}  {this.state.displayAction}</p>\n        </Display>\n        <Keys \n              id={new Date()}\n              plus={this.plusNum}\n              minus={this.minusNum}\n              mul={this.multiplyNum}\n              div={this.devideNum}\n              ans={this.answer}\n              reset= {() => this.setState({displayAction: '', operatorSign: '', prevOperatorSign:'', prevInput: ''})}\n              value= {(event) => this.showValue(event)}/>\n              {/*<p>Operator : {this.state.operatorSign}</p>\n              <p>PrevOperator : {this.state.prevOperatorSign}</p>\n              <p>currentInput : {this.state.displayAction}</p>\n              <p>prevInput : {this.state.prevInput}</p>*/}\n           <p style={{textAlign: 'center', color: 'white', cursor: 'pointer'}} onClick={() => alert('Made by MJDC')}>Easy Calculator V1.0</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}